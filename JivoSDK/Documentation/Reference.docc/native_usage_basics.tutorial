@Tutorial {
    @Intro(title: "Basic usage") {
        Some scenarios of how to use SDK
        
        - How to handle user session
        - How to display SDK
        - How to customize UI elements
        - How to handle Push Notifications
    }
    
    @Section(title: "How to handle user session") {
        @ContentAndMedia {
            Keep track of user activity, and perform following actions:
            - start session
            - update user info
            - stop session
        }
        
        @Steps {
            @Step {
                Let's assume you have a UserManager class
                that helps you to manage your active user
                
                @Code(name: "UserManager.swift", file: native.user_manager_00.swift.sample)
            }
            
            @Step {
                As mandatory, you have to start Jivo session for user
                
                > Note: You can also pass `nil` as userToken
                > to start an incognito session 
                
                @Code(name: "UserManager.swift", file: native.user_manager_01.swift.sample)
            }
            
            @Step {
                Optionally, you may specify some contact info
                
                > Note: It will help you contact him easier in future
                
                @Code(name: "UserManager.swift", file: native.user_manager_02.swift.sample)
            }
        }
    }
    
    @Section(title: "How to display SDK") {
        @ContentAndMedia {
            Next thing is to display the JivoSDK UI onscreen
        }
        
        @Steps {
            @Step {
                Let's assume you have a HelpViewController class
                which is responsible for Help Center of your app
                
                @Code(name: "ProfileViewController.swift", file: native.profile_view_controller_00.swift.sample)
            }
            
            @Step {
                First step is to define the additional case
                for opening the support screen
                
                @Code(name: "ProfileViewController.swift", file: native.profile_view_controller_01.swift.sample)
            }
            
            @Step {
                Then, import JivoSDK module and push JivoSDK into navigation stack
                
                @Code(name: "ProfileViewController.swift", file: native.profile_view_controller_02.swift.sample)
            }
            
            @Step {
                As an alternative, you may want to present JivoSDK modally over the screen
                
                @Code(name: "ProfileViewController.swift", file: native.profile_view_controller_03.swift.sample)
            }
        }
    }
    
    @Section(title: "How to customize UI elements") {
        @ContentAndMedia {
            You are able to change some captions, colors, and icons
        }
        
        @Steps {
            @Step {
                Create the class that conforms to ``JVDisplayDelegate``
                
                @Code(name: "SdkDisplayingDelegate.swift", file: native.sdk_displaying_delegate_00.swift.sample)
            }
            
            @Step {
                For UI customization, you will need additional "define" methods
                
                @Code(name: "SdkDisplayingDelegate.swift", file: native.sdk_displaying_delegate_01.swift.sample)
            }
            
            @Step {
                Implement these additional methods so they return proper values for elements you need
                
                > Note: In this example, we configure the header
                > to be a purple caption "Friendly Support" with no icon (empty) to the left
                
                @Code(name: "SdkDisplayingDelegate.swift", file: native.sdk_displaying_delegate_02.swift.sample)
            }
            
            @Step {
                Keep the strong reference to your instance,
                and assign it to ``Jivo``.``Jivo/display``.``JVDisplayController/delegate``
                
                @Code(name: "SdkDisplayingDelegate.swift", file: native.sdk_displaying_delegate_03.swift.sample)
            }
        }
    }
    
   @Section(title: "How to handle Push Notifications") {
        @ContentAndMedia {
            Let's assume you have an AppDelegate class
            that manages your app lifecycle
        }
        
        @Steps {
            @Step {
                In most projects, this class just implements the entry point
                
                @Code(name: "AppDelegate.swift", file: native.app_delegate_00.swift.sample)
            }
            
            @Step {
                To support Push Notifications,
                JivoSDK should take care of related system methods
                
                @Code(name: "AppDelegate.swift", file: native.app_delegate_01.swift.sample)
            }
            
            @Step {
                Also, JivoSDK can support User Notifications
                to take care of notifications displaying in foreground
                
                @Code(name: "AppDelegate.swift", file: native.app_delegate_02.swift.sample)
            }
            
            @Step {
                As an alternative, you can just make your AppDelegate to inherit from JVAppDelegate
                that already implements all of these methods
                
                @Code(name: "AppDelegate.swift", file: native.app_delegate_10.swift.sample)
            }
            
            @Step {
                Also, with ability to customize notifications handling
                
                @Code(name: "AppDelegate.swift", file: native.app_delegate_11.swift.sample)
            }
        }
    }
}
