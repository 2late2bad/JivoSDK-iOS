// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JivoSDK
import AVFoundation
import Alamofire
import AlamofireImage
import AudioToolbox
import BABFrameObservingInputAccessoryView
import CollectionAndTableViewCompatible
import CoreLocation
import DTModelStorage
import Foundation
import Gzip
import JFCollectionViewManager
import JFEmojiPicker
import JFFontello
import JFImagePicker
import JFWebSocket
import JMCodingKit
import JMMarkdownKit
import JMRepicKit
import JMShared
import JMSidePanelKit
import JMTimelineKit
@_exported import JivoSDK
import KeychainSwift
import Lottie
import MobileCoreServices
import Moya
import Photos
import PureParser
import Reachability
import Swift
import SwiftDate
import SwiftGraylog
import SwiftMime
import TypedTextAttributes
import UIKit
import WebKit
import XCGLogger
import libPhoneNumber_iOS
public enum JivoSDKSessionEnvironmentItem {
  case chatState
  case contactInfo
  case agentInfo
  case agentName
  public static func == (a: JivoSDKSessionEnvironmentItem, b: JivoSDKSessionEnvironmentItem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol IJivoSDKSession {
  @objc(setDelegate:) func setDelegate(_ object: JivoSDKSessionDelegate)
  @objc(startUpWithSiteID:channelID:userKey:) func startUp(siteID: Swift.Int, channelID: Swift.String, userKey: Swift.String)
  @objc(startUpWithinSandbox:withSiteID:channelID:userKey:) func startUp(sandbox: Swift.String, siteID: Swift.Int, channelID: Swift.String, userKey: Swift.String)
  @objc(updateCustomData:) func updateCustomData(_ data: JivoSDKSessionCustomData?)
  @objc(setPushToken:) func setPushToken(_ token: Swift.String?)
  @objc(handlePushPayload:deliveryDate:) func handlePushPayload(_ payload: [Swift.AnyHashable : Any], deliveryDate: Foundation.Date?)
  @objc(shutDown) func shutDown()
}
@_inheritsConvenienceInitializers @objc public class JivoSDKChattingHeaderConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public init(titleColor: UIKit.UIColor, subtitleColor: UIKit.UIColor)
  @objc deinit
}
@objc public protocol IJivoSDKChattingUI {
  @objc(setActiveMessage:) func setActiveMessage(text: Swift.String)
  @objc(setInputPlaceholder:) func setInputPlaceholder(text: Swift.String)
  @objc(adjustHeaderBarWithTitleColor:subtitleColor:) func adjustHeaderBar(titleColor: UIKit.UIColor, subtitleColor: UIKit.UIColor)
  @objc(placeInto:) func place(into navigationController: UIKit.UINavigationController)
}
@_hasMissingDesignatedInitializers open class PreferencesDriver {
  @objc deinit
}
@objc public protocol JivoSDKSessionDelegate {
  @objc func sessionDidStart()
}
@_inheritsConvenienceInitializers @objc public class JivoSDK : ObjectiveC.NSObject {
  @objc public static var session: IJivoSDKSession {
    get
  }
  @objc public static var chattingUI: IJivoSDKChattingUI {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public class JivoSDKSessionCustomData : ObjectiveC.NSObject {
  public init(name: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, brief: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
extension JivoSDKSessionEnvironmentItem : Swift.Equatable {}
extension JivoSDKSessionEnvironmentItem : Swift.Hashable {}
