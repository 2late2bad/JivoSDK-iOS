// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JivoSDK
import AVFoundation
import Alamofire
import AlamofireImage
import AudioToolbox
import BABFrameObservingInputAccessoryView
import CollectionAndTableViewCompatible
import CoreLocation
import DTModelStorage
import Foundation
import Gzip
import JFCollectionViewManager
import JFEmojiPicker
import JFFontello
import JFImagePicker
import JFWebSocket
import JMCodingKit
import JMMarkdownKit
import JMRepicKit
import JMShared
import JMSidePanelKit
import JMTimelineKit
@_exported import JivoSDK
import KeychainSwift
import Lottie
import MobileCoreServices
import Moya
import Photos
import PureParser
import Reachability
import Swift
import SwiftDate
import SwiftGraylog
import SwiftMime
import TypedTextAttributes
import UIKit
import WebKit
import XCGLogger
import libPhoneNumber_iOS
public enum JivoSDKSessionEnvironmentItem {
  case chatState
  case contactInfo
  case agentInfo
  case agentName
  public static func == (a: JivoSDKSessionEnvironmentItem, b: JivoSDKSessionEnvironmentItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol IJivoSDKSession {
  @objc(delegate) var delegate: JivoSDKSessionDelegate? { get set }
  @objc(startUpWithChannelID:userToken:) func startUp(channelID: Swift.String, userToken: Swift.String)
  @objc(updateCustomData:) func updateCustomData(_ data: JivoSDKSessionCustomData?)
  @objc(setPushTokenData:) func setPushToken(data: Foundation.Data?)
  @objc(setPushTokenHex:) func setPushToken(hex: Swift.String?)
  @objc(handlePushPayload:deliveryDate:) func handlePushPayload(_ payload: [Swift.AnyHashable : Any], deliveryDate: Foundation.Date?) -> Swift.Bool
  @objc(shutDown) func shutDown()
}
@objc public protocol IJivoSDKChattingUI {
  @objc(pushInto:) func push(into navigationController: UIKit.UINavigationController)
  @objc(pushInto:withConfig:) func push(into navigationController: UIKit.UINavigationController, config: JivoSDKChattingConfig)
  @objc(placeWithin:) func place(within navigationController: UIKit.UINavigationController)
  @objc(placeWithin:withConfig:) func place(within navigationController: UIKit.UINavigationController, config: JivoSDKChattingConfig)
  @objc(presentOver:) func present(over viewController: UIKit.UIViewController)
  @objc(presentOver:withConfig:) func present(over viewController: UIKit.UIViewController, config: JivoSDKChattingConfig)
}
@objc @_inheritsConvenienceInitializers open class JivoSDKContainer : UIKit.UINavigationController {
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol JivoSDKDebuggingDelegate {
  @objc func didLog(message: Swift.String)
}
@_hasMissingDesignatedInitializers open class PreferencesDriver {
  @objc deinit
}
@objc public class JivoSDKChattingConfig : ObjectiveC.NSObject {
  @objc public init(locale: Foundation.Locale? = nil, icon: UIKit.UIImage? = nil, titlePlaceholder: Swift.String? = nil, titleColor: UIKit.UIColor? = nil, subtitleCaption: Swift.String? = nil, subtitleColor: UIKit.UIColor? = nil, inputPlaceholder: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum JivoSDKDebuggingLevel : Swift.Int {
  case silent
  case full
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum JivoSDKArchivingStatus : Swift.Int {
  case success
  case failedAccessing
  case failedPreparing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol IJivoSDKDebugging {
  @objc var level: JivoSDKDebuggingLevel { get set }
  @objc func archiveLogs(completion: @escaping (Foundation.URL?, JivoSDKArchivingStatus) -> Swift.Void)
}
@objc public protocol JivoSDKSessionDelegate {
}
@_inheritsConvenienceInitializers @objc public class JivoSDK : ObjectiveC.NSObject {
  @objc public static var session: IJivoSDKSession {
    get
  }
  @objc public static var chattingUI: IJivoSDKChattingUI {
    get
  }
  @objc public static var debugging: IJivoSDKDebugging {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class JivoSDKSessionCustomData : ObjectiveC.NSObject {
  @objc public init(name: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, brief: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension JivoSDKSessionEnvironmentItem : Swift.Equatable {}
extension JivoSDKSessionEnvironmentItem : Swift.Hashable {}
extension JivoSDKDebuggingLevel : Swift.Equatable {}
extension JivoSDKDebuggingLevel : Swift.Hashable {}
extension JivoSDKDebuggingLevel : Swift.RawRepresentable {}
extension JivoSDKArchivingStatus : Swift.Equatable {}
extension JivoSDKArchivingStatus : Swift.Hashable {}
extension JivoSDKArchivingStatus : Swift.RawRepresentable {}
