// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JivoSDK
import AVFoundation
import BABFrameObservingInputAccessoryView
import CollectionAndTableViewCompatible
import CommonCrypto
import CoreLocation
import DTCollectionViewManager
import DTModelStorage
import Foundation
import Gzip
import JFEmojiPicker
import JFFontello
import JFWebSocket
import JMCodingKit
import JMDesignKit
import JMImageLoader
import JMMarkdownKit
import JMOnetimeCalculator
import JMRepicKit
import JMScalableView
import JMShared
import JMSidePanelKit
import JMTimelineKit
@_exported import JivoSDK
import KeychainSwift
import MapKit
import MessageUI
import MobileCoreServices
import Photos
import PhotosUI
import PureParser
import Reachability
import Swift
import SwiftDate
import SwiftGraylog
import SwiftMime
import SwiftUI
import TypedTextAttributes
import UIKit
import UserNotifications
import WebKit
import XCGLogger
import _Concurrency
import libPhoneNumber_iOS
public struct ChatTimelinePalette {
}
public enum ClientContextEvent {
  case clientIdChanged(to: Swift.String?)
  case startupConfigChanged(to: StartupModel?)
  case tokenChanged(to: Swift.String?)
  case pathChanged(to: Swift.String?)
  case licenseStateUpdated(to: LicenseState?)
}
public enum LicenseState {
  case unlicensed
  case licensed
  public static func == (a: LicenseState, b: LicenseState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConnectionConfig {
}
@objc public class JivoSDKSessionCustomData : ObjectiveC.NSObject {
  @objc public init(name: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, brief: Swift.String? = nil)
  @objc deinit
}
extension JivoSDKSessionCustomData {
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class JivoSDK : ObjectiveC.NSObject {
  @objc public static let session: JivoSDKSession
  @objc public static let chattingUI: JivoSDKChattingUI
  @objc public static let notifications: JivoSDKNotifications
  @objc public static let debugging: JivoSDKDebugging
  @objc override dynamic public init()
  @objc deinit
}
public enum JivoSDKTitleBarIconStyle {
  case `default`
  case hidden
  case custom(UIKit.UIImage)
}
@objc public enum JivoSDKChattingPaletteAlias : Swift.Int {
  public static let standard: JivoSDKChattingPaletteAlias
  case green
  case blue
  case graphite
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class JivoSDKChattingConfig : ObjectiveC.NSObject {
  public init(locale: Foundation.Locale? = nil, icon: JivoSDKTitleBarIconStyle? = nil, titlePlaceholder: Swift.String? = nil, titleColor: UIKit.UIColor? = nil, subtitleCaption: Swift.String? = nil, subtitleColor: UIKit.UIColor? = nil, inputPlaceholder: Swift.String? = nil, activeMessage: Swift.String? = nil, outcomingPalette: JivoSDKChattingPaletteAlias = .standard)
  @available(swift, obsoleted: 0.1, message: "This is Objective-C only initializer. Use init(locale:icon:titlePlaceholder:titleColor:subtitleCaption:subtitleColor:inputPlaceholder:activeMessage:outcomingPalette:) for Swift instead.")
  @objc public init(locale: Foundation.Locale? = nil, useDefaultIcon: Swift.Bool = true, customIcon: UIKit.UIImage? = nil, titlePlaceholder: Swift.String? = nil, titleColor: UIKit.UIColor? = nil, subtitleCaption: Swift.String? = nil, subtitleColor: UIKit.UIColor? = nil, inputPlaceholder: Swift.String? = nil, activeMessage: Swift.String? = nil, outcomingPalette: JivoSDKChattingPaletteAlias = .standard)
  @objc deinit
}
@objc public protocol JivoSDKChattingUIDelegate {
  @objc func jivoDidRequestUIDisplaying()
}
@objc public protocol JivoSDKChattingUI {
  @objc(delegate) var delegate: JivoSDKChattingUIDelegate? { get set }
  @objc(isDisplaying) var isDisplaying: Swift.Bool { get }
  @objc(pushInto:) func push(into navigationController: UIKit.UINavigationController)
  @objc(pushInto:withConfig:) func push(into navigationController: UIKit.UINavigationController, config: JivoSDKChattingConfig)
  @objc(placeWithin:) func place(within navigationController: UIKit.UINavigationController)
  @objc(placeWithin:withConfig:) func place(within navigationController: UIKit.UINavigationController, config: JivoSDKChattingConfig)
  @objc(presentOver:) func present(over viewController: UIKit.UIViewController)
  @objc(presentOver:withConfig:) func present(over viewController: UIKit.UIViewController, config: JivoSDKChattingConfig)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JivoSDKContainer : UIKit.UINavigationController {
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum JivoSDKDebuggingLevel : Swift.Int {
  case silent
  case full
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum JivoSDKArchivingStatus : Swift.Int {
  case success
  case failedAccessing
  case failedPreparing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol JivoSDKDebugging {
  @objc var level: JivoSDKDebuggingLevel { get set }
  @objc func archiveLogs(completion: @escaping (Foundation.URL?, JivoSDKArchivingStatus) -> Swift.Void)
}
@objc public protocol JivoSDKNotifications {
  @objc(setPushTokenData:) func setPushToken(data: Foundation.Data?)
  @objc(setPushTokenHex:) func setPushToken(hex: Swift.String?)
  @objc(handleRemoteNotificationContainingUserInfo:) func handleRemoteNotification(containingUserInfo userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc(handleNotification:) func handleNotification(_ notification: UserNotifications.UNNotification) -> Swift.Bool
  @objc(handleNotificationResponse:) func handleNotification(response: UserNotifications.UNNotificationResponse) -> Swift.Bool
}
@objc public protocol JivoSDKSession {
  @objc(delegate) var delegate: JivoSDKSessionDelegate? { get set }
  @objc(startUpWithChannelID:userToken:) func startUp(channelID: Swift.String, userToken: Swift.String)
  @objc(updateCustomData:) func updateCustomData(_ data: JivoSDKSessionCustomData?)
  @objc(shutDown) func shutDown()
}
@objc public protocol JivoSDKSessionDelegate {
}
#warning("TODO: Anton Karpushko, 26.11.2021 – Make MemoryRepository thread-safe.")
#warning("TODO: Anton Karpushko, 26.11.2021 – Make PersistentRepository thread-safe.")
public struct StartupModel : Swift.Equatable {
  public static func == (a: StartupModel, b: StartupModel) -> Swift.Bool
}
extension LicenseState : Swift.Equatable {}
extension LicenseState : Swift.Hashable {}
extension JivoSDKChattingPaletteAlias : Swift.Equatable {}
extension JivoSDKChattingPaletteAlias : Swift.Hashable {}
extension JivoSDKChattingPaletteAlias : Swift.RawRepresentable {}
extension JivoSDKDebuggingLevel : Swift.Equatable {}
extension JivoSDKDebuggingLevel : Swift.Hashable {}
extension JivoSDKDebuggingLevel : Swift.RawRepresentable {}
extension JivoSDKArchivingStatus : Swift.Equatable {}
extension JivoSDKArchivingStatus : Swift.Hashable {}
extension JivoSDKArchivingStatus : Swift.RawRepresentable {}
